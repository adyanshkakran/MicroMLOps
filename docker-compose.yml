version: '2.1'

services:
  zoo1:
    image: confluentinc/cp-zookeeper
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - kafkanet

  kafka1:
    image: confluentinc/cp-kafka
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    volumes:
      - ./kafka/data:/var/lib/kafka/data
      - ./kafka/logs:/var/lib/kafka/logs
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - kafkanet
  
  topic-list:
    build: ./topic-list
    depends_on:
      - zoo1
      - kafka1
    networks:
      - kafkanet

  data-warehouse:
    build: ./data-warehouse
    networks:
      - kafkanet
    restart: unless-stopped

  yaml:
    build: ./yaml
    depends_on:
      - zoo1
      - kafka1
    env_file:
      - ./yaml/.env
    networks:
      - kafkanet
    volumes:
      - ./data-warehouse:/archive
      - ./kafka_logger.py:/app/kafka_logger.py

  data-preprocessing:
    build: data-preprocessing
    depends_on:
      - zoo1
      - kafka1
      - topic-list
    env_file:
      - ./data-preprocessing/.env
    networks:
      - kafkanet
    volumes:
      - ./data-warehouse:/archive
      - ./kafka_logger.py:/app/kafka_logger.py
    restart: unless-stopped

  feature-extraction:
    build: feature-extraction
    depends_on:
      - zoo1
      - kafka1
      - topic-list
    env_file:
      - ./feature-extraction/.env
    networks:
      - kafkanet
    volumes:
      - ./data-warehouse:/archive
      - ./kafka_logger.py:/app/kafka_logger.py
    restart: unless-stopped

  training:
    build: training
    depends_on:
      - zoo1
      - kafka1
      - topic-list
    env_file:
      - ./training/.env
    networks:
      - kafkanet
    volumes:
      - ./data-warehouse:/archive
      - ./kafka_logger.py:/app/kafka_logger.py
    restart: unless-stopped

  model-management:
    build: model_management
    depends_on:
      - zoo1
      - kafka1
      - topic-list
    env_file:
      - ./model_management/.env
    networks:
      - kafkanet
    volumes:
      - ./data-warehouse:/archive
      - ./kafka_logger.py:/app/kafka_logger.py
    restart: unless-stopped
  
  inference:
    build: inference
    depends_on:
      - zoo1
      - kafka1
      - topic-list
    env_file:
      - ./inference/.env
    networks:
      - kafkanet
    volumes:
      - ./data-warehouse:/archive
      - ./kafka_logger.py:/app/kafka_logger.py
    restart: unless-stopped

networks:
  kafkanet:
    driver: bridge